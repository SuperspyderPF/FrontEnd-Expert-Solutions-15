/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {

    function main() {
          const nodeStates = new Array(graph.length).fill(null);
    
          for (const node of initial) {
                nodeStates[node] = -1;
          }
    
          function scan(initialNode) {
                nodeStates[initialNode] = null;
                function DFS(node) {
                      if (nodeStates[node] === initialNode || nodeStates[node] < 0) return;
    
                      if (nodeStates[node] === null && node !== initialNode) {
                            nodeStates[node] = initialNode;
                            nodeStates[initialNode]--;
                      } else {
                            if (nodeStates[node] !== null) {
                                  nodeStates[nodeStates[node]]++;
                            }
                            nodeStates[node] = -1;
                      }
    
                      const edges = graph[node];
    
                      for (let i = 0; i < edges.length; i++) {
                            if (!!edges[i]) {
                                  DFS(i);
                            }
                      }
                }
                return DFS(initialNode);
          }
    
          for (const node of initial) scan(node);
    
          let maxNode = initial[0];
    
          for (let n = 0, i = initial[n]; n < initial.length; i = initial[++n]) {
                if (nodeStates[i] < nodeStates[maxNode] || (nodeStates[i] === nodeStates[maxNode] && i < maxNode)) {
                      maxNode = i;
                }
          }
    
          return maxNode;
    }
    return main()
    
    };